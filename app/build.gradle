plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.devtools.ksp'
//    id 'com.flurry.android.symbols'
}

apply from: secret

def buildTime = new Date().format("YYYY-MM-dd HH:mm:ss", TimeZone.getTimeZone("GMT+8:00"))

android.defaultConfig {
    secret.buildConfigField.forEach({ k, v ->
        buildConfigField("String", k, "\"${v}\"")
    })
    buildConfigField("String", "BUILD_TIME", "\"${buildTime}\"")
    secret.shieldTextList.forEach({ k, v ->
        buildConfigField("String[]", k, v)
    })
    secret.dataSource.forEach({ k, v ->
        buildConfigField("String", k, "\"${v}\"")
    })
}

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId "com.skyd.imomoe"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode version_code
        versionName version_name
        flavorDimensions "versionName"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }

        ndk {
            abiFilters 'armeabi', 'arm64-v8a'
        }

        manifestPlaceholders = secret.manifestPlaceholders

        resConfigs "xxxhdpi", "anydpi-v26"

        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            keyAlias secret.sign.RELEASE_KEY_ALIAS
            keyPassword secret.sign.RELEASE_KEY_PASSWORD
            storeFile file('../key.jks')
            storePassword secret.sign.RELEASE_STORE_PASSWORD
        }
    }

    productFlavors {
        Github
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "app_release_${variant.productFlavors[0].name.toLowerCase()}_${variant.versionName}.apk"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false           // 使用keep.xml，keep住某些资源文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix '.debug'    // 一台手机debug release共存
            ndk {
                abiFilters 'armeabi', 'x86', 'x86_64', 'arm64-v8a'
            }
        }
        release {
            signingConfig signingConfigs.release    //签名
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true       // 使用keep.xml，keep住某些资源文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi', 'arm64-v8a'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        exclude 'META-INF/beans.xml'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/README.md'
        exclude 'META-INF/CHANGES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/eclipse.inf'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/nanohttpd/**'
        exclude 'about_files/LICENSE_CDDL.txt'
        exclude 'DebugProbesKt.bin'
        exclude 'jetty-dir.css'
        exclude 'plugin.properties'
        exclude 'org/seamless/**'
        exclude 'org/eclipse/jetty/**'
        exclude 'org/fourthline/cling/**'
        exclude 'okhttp3/internal/publicsuffix/NOTICE'
        exclude 'com/badlogic/**'
        exclude 'XPP3_1.1.3.2_VERSION'
        exclude 'XPP3_1.1.3.3_VERSION'
        exclude 'kotlin-tooling-metadata.json'
        exclude 'build-data.properties'
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.2.0'
    }
}

dependencies {

    implementation deps.kotlin.kotlin_stdlib
    implementation deps.kotlin.core_ktx
    implementation deps.support.appcompat
    implementation deps.support.material
    implementation deps.support.recyclerview
    implementation deps.support.swiperefreshlayout
    implementation deps.support.coordinatorlayout
    implementation deps.support.constraintlayout
    implementation deps.support.fragment_ktx
    implementation deps.support.viewpager2
    implementation deps.support.preference
    implementation deps.support.security_crypto
    implementation deps.support.core_splashscreen
    implementation deps.support.profileinstaller
    implementation deps.compose.ui
    implementation deps.compose.constraintlayout_compose
    implementation deps.compose.material3
    implementation deps.compose.ui_viewbinding
    implementation deps.compose.ui_tooling_preview
    implementation deps.compose.runtime_livedata
    implementation deps.compose.compose_theme_adapter
    implementation deps.compose.material3_window_size_class
    implementation deps.accompanist.systemuicontroller
    implementation deps.accompanist.swiperefresh
    implementation deps.jsoup.jsoup
    implementation deps.lifecycle.lifecycle_viewmodel_ktx
    implementation deps.lifecycle.lifecycle_runtime_ktx
    implementation deps.lifecycle.lifecycle_extensions
    implementation deps.hilt.hilt_android
    implementation deps.hilt.hilt_navigation_compose
    kapt deps.hilt.hilt_android_compiler
    implementation deps.okhttp3.okhttp
    implementation deps.okhttp3.logging_interceptor
    implementation deps.shuyu.gsyVideoPlayer_java
    implementation deps.shuyu.gsyVideoPlayer_exo2
    implementation deps.retrofit2.retrofit
    implementation deps.retrofit2.converter_gson
    implementation deps.getActivity.XXPermissions
    implementation deps.kotlinx.kotlinx_coroutines_android
    implementation deps.room.room_runtime
    implementation deps.room.room_ktx
    implementation deps.support.legacy_support_v4
    ksp deps.room.room_compiler
    implementation deps.aria.core
    kapt deps.aria.compiler
    implementation deps.aria.m3u8Component
    implementation deps.cling.cling_core
    implementation deps.cling.cling_support
    implementation deps.jetty.jetty_server
    implementation deps.jetty.jetty_servlet
    implementation deps.jetty.jetty_client
    implementation deps.nanohttpd.nanohttpd
    compileOnly files('libs/cdi-api.jar')
    // DLNACastService编译需要javax.enterprise.inject.Alternative类
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'
    implementation deps.greenrobot.eventbus
    implementation deps.flurry.analytics
    implementation deps.smart.refresh_layout_kernel
    implementation deps.smart.refresh_header_material
    implementation deps.smart.refresh_footer_ball
    implementation deps.coil_kt.coil
    implementation deps.coil_kt.coil_compose
    implementation deps.kuaishou.akdanmaku
    implementation deps.vadiole.colorpicker
    implementation deps.commons.commons_text
    implementation deps.okhttp3.okhttp_dnsoverhttps
    implementation deps.thegrizzlylabs.sardine_android
}

//flurryCrash {
//    apiKey secret.buildConfigField.FLURRY_API_KEY
//    useEnvVar false
//    token secret.buildConfigField.PROGRAMMATIC_TOKEN
//}

/**
 * 下面是生成数据源Jar的过程。保证生成了数据源的class文件后，再直接运行makeAds任务即可
 */
// 1.删除之前打出的包，默认将包打在'build/libs/'下
task deleteOldJar(type: Delete) {
    delete 'build/libs/CustomDataSource.jar'
}

// 2.使用d8将class打包为dex文件
// 要保证已经将.../Android/Sdk/build-tools/xx.x.x加入环境变量
task makeDex(type: Exec) {
    project.file('build/dex/').mkdirs()
    // 根据需求更改
    commandLine 'cmd', "/c", "d8 --output build/dex/ build/tmp/kotlin-classes/GithubDebug/com/skyd/imomoe/model/impls/custom/*.class"
}

// 3.将dex和CustomInfo文件一起打入jar
task makeJar(type: Jar) {
    //要打成的包的名字
    baseName 'CustomDataSource'
    //选取要打包的文件夹
    from(
            'build/dex/',
            'src/main/java/com/skyd/imomoe/model/impls/custom/CustomInfo'
    )
    // dex文件和CustomInfo文件都存放在根目录即可
    into('/')
}

// 4.命名为ads
task makeAds(type: Sync) {
    from('build/libs/')
    into('build/libs/')
    include '*.jar'
    rename { String filename ->
        filename.replace(".jar", ".ads")
    }
}

task openDirectory(type: Exec) {
    println project.projectDir
    commandLine 'cmd', "/c", "explorer.exe /root,\"${project.projectDir}\\build\\libs\""
}

// 打包~
makeDex.dependsOn(deleteOldJar)
makeJar.dependsOn(makeDex)
makeAds.dependsOn(makeJar)